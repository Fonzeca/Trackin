// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	model "github.com/Fonzeca/Trackin/db/model"
	mock "github.com/stretchr/testify/mock"
)

// IZonasManager is an autogenerated mock type for the IZonasManager type
type IZonasManager struct {
	mock.Mock
}

// CreateZone provides a mock function with given fields: zoneRequest
func (_m *IZonasManager) CreateZone(zoneRequest model.ZoneRequest) error {
	ret := _m.Called(zoneRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ZoneRequest) error); ok {
		r0 = rf(zoneRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteZoneById provides a mock function with given fields: idParam
func (_m *IZonasManager) DeleteZoneById(idParam string) error {
	ret := _m.Called(idParam)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(idParam)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditZoneById provides a mock function with given fields: idParam, zoneRequest
func (_m *IZonasManager) EditZoneById(idParam string, zoneRequest model.ZoneRequest) error {
	ret := _m.Called(idParam, zoneRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.ZoneRequest) error); ok {
		r0 = rf(idParam, zoneRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetZoneConfigByImei provides a mock function with given fields: imei
func (_m *IZonasManager) GetZoneConfigByImei(imei string) ([]model.ZoneView, error) {
	ret := _m.Called(imei)

	var r0 []model.ZoneView
	if rf, ok := ret.Get(0).(func(string) []model.ZoneView); ok {
		r0 = rf(imei)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ZoneView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imei)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZonesByEmpresaId provides a mock function with given fields: idParam
func (_m *IZonasManager) GetZonesByEmpresaId(idParam string) ([]model.ZoneRequest, error) {
	ret := _m.Called(idParam)

	var r0 []model.ZoneRequest
	if rf, ok := ret.Get(0).(func(string) []model.ZoneRequest); ok {
		r0 = rf(idParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ZoneRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIZonasManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewIZonasManager creates a new instance of IZonasManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIZonasManager(t mockConstructorTestingTNewIZonasManager) *IZonasManager {
	mock := &IZonasManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
