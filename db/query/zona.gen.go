// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Fonzeca/Trackin/db/model"
)

func newZona(db *gorm.DB, opts ...gen.DOOption) zona {
	_zona := zona{}

	_zona.zonaDo.UseDB(db, opts...)
	_zona.zonaDo.UseModel(&model.Zona{})

	tableName := _zona.zonaDo.TableName()
	_zona.ALL = field.NewAsterisk(tableName)
	_zona.ID = field.NewInt32(tableName, "id")
	_zona.EmpresaID = field.NewInt32(tableName, "empresa_id")
	_zona.ColorLinea = field.NewString(tableName, "color_linea")
	_zona.ColorRelleno = field.NewString(tableName, "color_relleno")
	_zona.Puntos = field.NewString(tableName, "puntos")
	_zona.Nombre = field.NewString(tableName, "nombre")

	_zona.fillFieldMap()

	return _zona
}

type zona struct {
	zonaDo

	ALL          field.Asterisk
	ID           field.Int32
	EmpresaID    field.Int32
	ColorLinea   field.String
	ColorRelleno field.String
	Puntos       field.String
	Nombre       field.String

	fieldMap map[string]field.Expr
}

func (z zona) Table(newTableName string) *zona {
	z.zonaDo.UseTable(newTableName)
	return z.updateTableName(newTableName)
}

func (z zona) As(alias string) *zona {
	z.zonaDo.DO = *(z.zonaDo.As(alias).(*gen.DO))
	return z.updateTableName(alias)
}

func (z *zona) updateTableName(table string) *zona {
	z.ALL = field.NewAsterisk(table)
	z.ID = field.NewInt32(table, "id")
	z.EmpresaID = field.NewInt32(table, "empresa_id")
	z.ColorLinea = field.NewString(table, "color_linea")
	z.ColorRelleno = field.NewString(table, "color_relleno")
	z.Puntos = field.NewString(table, "puntos")
	z.Nombre = field.NewString(table, "nombre")

	z.fillFieldMap()

	return z
}

func (z *zona) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := z.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (z *zona) fillFieldMap() {
	z.fieldMap = make(map[string]field.Expr, 6)
	z.fieldMap["id"] = z.ID
	z.fieldMap["empresa_id"] = z.EmpresaID
	z.fieldMap["color_linea"] = z.ColorLinea
	z.fieldMap["color_relleno"] = z.ColorRelleno
	z.fieldMap["puntos"] = z.Puntos
	z.fieldMap["nombre"] = z.Nombre
}

func (z zona) clone(db *gorm.DB) zona {
	z.zonaDo.ReplaceConnPool(db.Statement.ConnPool)
	return z
}

func (z zona) replaceDB(db *gorm.DB) zona {
	z.zonaDo.ReplaceDB(db)
	return z
}

type zonaDo struct{ gen.DO }

func (z zonaDo) Debug() *zonaDo {
	return z.withDO(z.DO.Debug())
}

func (z zonaDo) WithContext(ctx context.Context) *zonaDo {
	return z.withDO(z.DO.WithContext(ctx))
}

func (z zonaDo) ReadDB() *zonaDo {
	return z.Clauses(dbresolver.Read)
}

func (z zonaDo) WriteDB() *zonaDo {
	return z.Clauses(dbresolver.Write)
}

func (z zonaDo) Session(config *gorm.Session) *zonaDo {
	return z.withDO(z.DO.Session(config))
}

func (z zonaDo) Clauses(conds ...clause.Expression) *zonaDo {
	return z.withDO(z.DO.Clauses(conds...))
}

func (z zonaDo) Returning(value interface{}, columns ...string) *zonaDo {
	return z.withDO(z.DO.Returning(value, columns...))
}

func (z zonaDo) Not(conds ...gen.Condition) *zonaDo {
	return z.withDO(z.DO.Not(conds...))
}

func (z zonaDo) Or(conds ...gen.Condition) *zonaDo {
	return z.withDO(z.DO.Or(conds...))
}

func (z zonaDo) Select(conds ...field.Expr) *zonaDo {
	return z.withDO(z.DO.Select(conds...))
}

func (z zonaDo) Where(conds ...gen.Condition) *zonaDo {
	return z.withDO(z.DO.Where(conds...))
}

func (z zonaDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *zonaDo {
	return z.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (z zonaDo) Order(conds ...field.Expr) *zonaDo {
	return z.withDO(z.DO.Order(conds...))
}

func (z zonaDo) Distinct(cols ...field.Expr) *zonaDo {
	return z.withDO(z.DO.Distinct(cols...))
}

func (z zonaDo) Omit(cols ...field.Expr) *zonaDo {
	return z.withDO(z.DO.Omit(cols...))
}

func (z zonaDo) Join(table schema.Tabler, on ...field.Expr) *zonaDo {
	return z.withDO(z.DO.Join(table, on...))
}

func (z zonaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *zonaDo {
	return z.withDO(z.DO.LeftJoin(table, on...))
}

func (z zonaDo) RightJoin(table schema.Tabler, on ...field.Expr) *zonaDo {
	return z.withDO(z.DO.RightJoin(table, on...))
}

func (z zonaDo) Group(cols ...field.Expr) *zonaDo {
	return z.withDO(z.DO.Group(cols...))
}

func (z zonaDo) Having(conds ...gen.Condition) *zonaDo {
	return z.withDO(z.DO.Having(conds...))
}

func (z zonaDo) Limit(limit int) *zonaDo {
	return z.withDO(z.DO.Limit(limit))
}

func (z zonaDo) Offset(offset int) *zonaDo {
	return z.withDO(z.DO.Offset(offset))
}

func (z zonaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *zonaDo {
	return z.withDO(z.DO.Scopes(funcs...))
}

func (z zonaDo) Unscoped() *zonaDo {
	return z.withDO(z.DO.Unscoped())
}

func (z zonaDo) Create(values ...*model.Zona) error {
	if len(values) == 0 {
		return nil
	}
	return z.DO.Create(values)
}

func (z zonaDo) CreateInBatches(values []*model.Zona, batchSize int) error {
	return z.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (z zonaDo) Save(values ...*model.Zona) error {
	if len(values) == 0 {
		return nil
	}
	return z.DO.Save(values)
}

func (z zonaDo) First() (*model.Zona, error) {
	if result, err := z.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Zona), nil
	}
}

func (z zonaDo) Take() (*model.Zona, error) {
	if result, err := z.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Zona), nil
	}
}

func (z zonaDo) Last() (*model.Zona, error) {
	if result, err := z.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Zona), nil
	}
}

func (z zonaDo) Find() ([]*model.Zona, error) {
	result, err := z.DO.Find()
	return result.([]*model.Zona), err
}

func (z zonaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Zona, err error) {
	buf := make([]*model.Zona, 0, batchSize)
	err = z.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (z zonaDo) FindInBatches(result *[]*model.Zona, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return z.DO.FindInBatches(result, batchSize, fc)
}

func (z zonaDo) Attrs(attrs ...field.AssignExpr) *zonaDo {
	return z.withDO(z.DO.Attrs(attrs...))
}

func (z zonaDo) Assign(attrs ...field.AssignExpr) *zonaDo {
	return z.withDO(z.DO.Assign(attrs...))
}

func (z zonaDo) Joins(fields ...field.RelationField) *zonaDo {
	for _, _f := range fields {
		z = *z.withDO(z.DO.Joins(_f))
	}
	return &z
}

func (z zonaDo) Preload(fields ...field.RelationField) *zonaDo {
	for _, _f := range fields {
		z = *z.withDO(z.DO.Preload(_f))
	}
	return &z
}

func (z zonaDo) FirstOrInit() (*model.Zona, error) {
	if result, err := z.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Zona), nil
	}
}

func (z zonaDo) FirstOrCreate() (*model.Zona, error) {
	if result, err := z.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Zona), nil
	}
}

func (z zonaDo) FindByPage(offset int, limit int) (result []*model.Zona, count int64, err error) {
	result, err = z.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = z.Offset(-1).Limit(-1).Count()
	return
}

func (z zonaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = z.Count()
	if err != nil {
		return
	}

	err = z.Offset(offset).Limit(limit).Scan(result)
	return
}

func (z zonaDo) Scan(result interface{}) (err error) {
	return z.DO.Scan(result)
}

func (z zonaDo) Delete(models ...*model.Zona) (result gen.ResultInfo, err error) {
	return z.DO.Delete(models)
}

func (z *zonaDo) withDO(do gen.Dao) *zonaDo {
	z.DO = *do.(*gen.DO)
	return z
}
